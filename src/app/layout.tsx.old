"use client";

import React, { useState, useEffect } from "react";
import { Inter } from "next/font/google";
import Link from "next/link";
import { 
  HomeIcon, 
  MagnifyingGlassIcon, 
  PlusCircleIcon, 
  HeartIcon, 
  UserCircleIcon, 
  MoonIcon, 
  SunIcon,
  ChatBubbleLeftIcon 
} from '@heroicons/react/24/outline';
import { collection, query, where, onSnapshot } from "firebase/firestore";
import { db } from "@/lib/firebase-init";
import PageTransition from "@/components/PageTransition";

import "./globals.css";

const inter = Inter({ subsets: ["latin"] });

interface RootLayoutProps {
  children: React.ReactNode;
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [darkMode, setDarkMode] = useState(false);
  const [unreadNotifications, setUnreadNotifications] = useState(0);
  const [unreadMessages, setUnreadMessages] = useState(0);
  const currentUser = "currentUserId"; // Replace with actual user ID from auth

  useEffect(() => {
    // Subscribe to unread notifications
    const notificationsRef = collection(db, "notifications");
    const notificationsQuery = query(
      notificationsRef,
      where("userId", "==", currentUser),
      where("read", "==", false)
    );

    const unsubscribeNotifications = onSnapshot(notificationsQuery, (snapshot) => {
      setUnreadNotifications(snapshot.size);
    });

    // Subscribe to unread messages
    const chatsRef = collection(db, "chats");
    const chatsQuery = query(
      chatsRef,
      where("participants", "array-contains", currentUser)
    );

    const unsubscribeMessages = onSnapshot(chatsQuery, (snapshot) => {
      let totalUnread = 0;
      snapshot.forEach((doc) => {
        const data = doc.data();
        if (data.unreadCount && data.lastMessageSender !== currentUser) {
          totalUnread += data.unreadCount;
        }
      });
      setUnreadMessages(totalUnread);
    });

    return () => {
      unsubscribeNotifications();
      unsubscribeMessages();
    };
  }, [currentUser]);

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    setDarkMode(savedTheme === 'dark');
  }, []);

  useEffect(() => {
    document.documentElement.classList.toggle('dark', darkMode);
    localStorage.setItem('theme', darkMode ? 'dark' : 'light');
  }, [darkMode]);

  const TopNavbar = () => (
    <header className="border-b border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-900 sticky top-0 z-50">
      <div className="max-w-6xl mx-auto flex items-center justify-between p-4">
        <h1 className="text-3xl font-extrabold tracking-wide cursor-pointer select-none">
          Unio
        </h1>
        <div className="hidden sm:flex flex-1 mx-4 max-w-xs">
          <input
            type="text"
            placeholder="Pesquisar"
            className="w-full px-3 py-1 rounded-md border border-gray-300 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
          />
        </div>
        <nav className="flex items-center space-x-6">
          <Link href="/">
            <HomeIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
          </Link>
          <Link href="/search">
            <MagnifyingGlassIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
          </Link>
          <Link href="/create">
            <PlusCircleIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
          </Link>
          <Link href="/notifications" className="relative">
            <HeartIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
            {unreadNotifications > 0 && (
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                {unreadNotifications}
              </span>
            )}
          </Link>
          <Link href="/chat" className="relative">
            <ChatBubbleLeftIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
            {unreadMessages > 0 && (
              <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-4 h-4 flex items-center justify-center">
                {unreadMessages}
              </span>
            )}
          </Link>
          <Link href="/profile">
            <UserCircleIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
          </Link>
          <button
            onClick={() => setDarkMode(!darkMode)}
            className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800"
          >
            {darkMode ? (
              <SunIcon className="h-6 w-6" />
            ) : (
              <MoonIcon className="h-6 w-6" />
            )}
          </button>
        </nav>
      </div>
    </header>
  );

  const BottomNavbar = () => (
    <footer className="sm:hidden fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-900 border-t border-gray-300 dark:border-gray-700 z-50">
      <nav className="flex justify-around p-2">
        <HomeIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
        <MagnifyingGlassIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
        <PlusCircleIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
        <HeartIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
        <UserCircleIcon className="h-6 w-6 cursor-pointer hover:text-blue-600 dark:hover:text-blue-400" />
      </nav>
    </footer>
  );

  return (
    <html lang="pt-BR" className={darkMode ? 'dark' : ''}>
      <body className={`${inter.className} bg-white dark:bg-gray-900 text-blue-900 dark:text-blue-100 min-h-screen flex flex-col transition-colors duration-200`}>
        <TopNavbar />
        <main className="flex-grow max-w-6xl mx-auto p-4">
          <PageTransition>
            {children}
          </PageTransition>
        </main>
        <BottomNavbar />
      </body>
    </html>
  );
}
